using Saber.Core.Extensions.Strings;
using System.Text.Json;

namespace Saber.Common.Platform
{
    public static class PageInfo
    {
        public static Dictionary<string, Models.Page.Settings> Configs { get; set; } = new Dictionary<string, Models.Page.Settings>();

        public static string[] GetRelativePath(string path)
        {
            var paths = path.Split('/', StringSplitOptions.RemoveEmptyEntries);

            //translate root path to relative path
            if (paths.Length > 0 && paths[0].ToLower() == "content" && paths.Length > 1)
            {
                if (paths[1].ToLower() == "temp") { return new string[] { }; }
                if (paths[0] == "content") { paths[0] = "Content"; }
            }
            else if (paths.Length > 0 && paths[0].ToLower() != "content")
            {
                switch (paths[0].ToLower())
                {
                    case "wwwroot":
                        return paths;
                    case "root":
                        return new string[] { "" };
                    case "temp":
                        return Array.Empty<string>();
                    default:
                        path = "Content/" + path;
                        paths = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
                        break;
                }
            }
            else if (path == "")
            {
                path = "Content/";
                paths = new string[] { "Content" };
            }
            else
            {
                return Array.Empty<string>();
            }
            return paths;
        }

        public static string ConfigFilePath(string path)
        {
            var paths = GetRelativePath(path);
            var relpath = string.Join("/", paths);
            var file = paths[paths.Length - 1];
            var fileparts = file.Split(".", 2);
            return relpath.Replace(file, fileparts[0] + ".json");
        }

        public static Models.Page.Settings GetPageConfig(string path)
        {
            var filename = ConfigFilePath(path);
            Models.Page.Settings config = null;
            var paths = GetRelativePath(path);
            if (Configs.ContainsKey(filename))
            {
                //get config from cache
                config = Configs[filename];
            }
            else
            {
                //get config from file system
                var contents = File.Exists(App.MapPath(filename)) ? File.ReadAllText(App.MapPath(filename)) : "";
                if (!string.IsNullOrEmpty(contents))
                {
                    //deserialize page config file
                    config = JsonSerializer.Deserialize<Models.Page.Settings>(contents);
                }
                if(config != null)
                {
                    //update config properties
                    if (string.IsNullOrEmpty(config.Header))
                    {
                        config.Header = "header.html";
                    }
                    if (string.IsNullOrEmpty(config.Footer))
                    {
                        config.Footer = "footer.html";
                    }
                    config.Paths = paths;

                    //add config to cache
                    Configs.Add(filename, config);
                }
                else
                {
                    //generate new config if none exist
                    var file = paths[^1];
                    config = new Models.Page.Settings()
                    {
                        Title = new Models.Page.Title()
                        {
                            prefix = "",
                            suffix = "",
                            body = file.Capitalize().Replace("-", " ").Replace("_", " ").Replace(".html", "")
                        },
                        Description = "This page was generated by the Saber web development platform",
                        DateCreated = DateTime.Now,
                        Security = new Models.Page.Security()
                        {
                            groups = Array.Empty<int>()
                        },
                        Paths = paths
                    };

                    //add config to cache
                    Configs.Add(filename, config);
                }
            }

            if(config != null)
            {
                //see if page uses a template
                if (string.IsNullOrEmpty(config.TemplatePath) && config.HasNoTemplate == false)
                {
                    //find the template that belongs to this page (if any)
                    var pathx = paths.Length - 1;
                    if (paths[^1] == "template")
                    {
                        //find template in parent folder (since this page is also a template)
                        pathx -= 1;
                    }
                    for (var x = pathx; x > 1; x--)
                    {
                        //check each folder in the hierarchy of paths to find the closest template
                        var templatePath = string.Join('/', paths.Take(x).ToArray()) + "/template";
                        if (File.Exists(templatePath + ".html"))
                        {
                            config.TemplatePath = templatePath;
                            config.IsFromTemplate = true;
                            break;
                        }
                    }
                    if (string.IsNullOrEmpty(config.TemplatePath))
                    {
                        config.HasNoTemplate = true;
                    }
                }
                if (!string.IsNullOrEmpty(config.TemplatePath) && config.HasNoTemplate == false)
                {
                    //load template config
                    Models.Page.Settings tempconfig = GetPageConfig(config.TemplatePath + ".json");
                    if (tempconfig != null)
                    {
                        config.IsFromTemplate = true;
                        if (tempconfig.IsLiveTemplate)
                        {
                            //add stylesheets & scripts from live template into page config
                            if (tempconfig.Stylesheets.Count > 0)
                            {
                                config.LiveStylesheets = tempconfig.Stylesheets;
                            }
                            if (tempconfig.Scripts.Count > 0)
                            {
                                config.LiveScripts = tempconfig.Scripts;
                            }
                            config.Header = tempconfig.Header;
                            config.Footer = tempconfig.Footer;
                            config.UsesLiveTemplate = true;
                        }
                    }
                }
            }
            return config;
        }

        public static string NameFromFile(string filename)
        {
            if (filename.Contains('/'))
            {
                filename = filename.Split('/')[^1];
            }
            return filename.Replace(".html", "").Replace("-", " ").Replace("_", " ").Capitalize();
        }

        public static void SavePageConfig(string path, Models.Page.Settings config)
        {
            var filename = ConfigFilePath(path);
            if (Configs.ContainsKey(filename))
            {
                Configs[filename] = config;
            }
            File.WriteAllText(App.MapPath(filename), JsonSerializer.Serialize(config, new JsonSerializerOptions() { WriteIndented = true }));
        }

        /// <summary>
        /// Removes all associated cache for a specific web page
        /// </summary>
        /// <param name="path">Relative path to the page (e.g. "/Content/pages/home.html")</param>
        /// <param name="language"></param>
        public static void ClearCache(string path, string language)
        {
            //remove config from cache
            var filename = ConfigFilePath(path);
            Configs.Remove(filename);
            //remove content fields from cache
            var lang = Core.ContentFields.ContentFile(path, language);
            Cache.Remove(lang);
            //remove View from cache
            var paths = GetRelativePath(path);
            var relpath = string.Join("/", paths);
            ViewCache.Remove(relpath);
        }
    }
}
